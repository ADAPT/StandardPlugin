// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AgGateway.ADAPT.Standard;
//
//    var root = Root.FromJson(jsonString);

namespace AgGateway.ADAPT.Standard
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// When ADAPT data is consolidated into a single dataset (usually as physical files), the
    /// Root component acts as the top level entity that contains all available data.  It is
    /// serialized as "adapt.json."  Note that it is also possible to use json representations of
    /// individual ADAPT components in a distributed service architecture without the container
    /// entities (Root, Catalog, Documents, etc.)
    /// </summary>
    public partial class Root
    {
        [JsonProperty("catalog", NullValueHandling = NullValueHandling.Ignore)]
        public Catalog Catalog { get; set; }

        [JsonProperty("dataTypeDefinitionVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? DataTypeDefinitionVersion { get; set; }

        [JsonProperty("documents", NullValueHandling = NullValueHandling.Ignore)]
        public Documents Documents { get; set; }

        [JsonProperty("unitSystemVersion", NullValueHandling = NullValueHandling.Ignore)]
        public double? UnitSystemVersion { get; set; }
    }

    /// <summary>
    /// Container for data types that are fixed, infrequently changing, or otherwise prerequisite
    /// to transactional data.  Master or Reference data, often called Setup or Coding data in
    /// agricultural applications.
    /// </summary>
    public partial class Catalog
    {
        /// <summary>
        /// All Brands in the data
        /// </summary>
        [JsonProperty("brands", NullValueHandling = NullValueHandling.Ignore)]
        public List<BrandElement> Brands { get; set; }

        /// <summary>
        /// All Crops in the data
        /// </summary>
        [JsonProperty("crops", NullValueHandling = NullValueHandling.Ignore)]
        public List<CropElement> Crops { get; set; }

        /// <summary>
        /// All Crop Zones in the data
        /// </summary>
        [JsonProperty("cropZones", NullValueHandling = NullValueHandling.Ignore)]
        public List<CropZoneElement> CropZones { get; set; }

        /// <summary>
        /// Any custom Data Type Definitions defined by the producer for this data.  By default, this
        /// list is empty and all definitions are sourced from the ADAPT Standard Data Type
        /// Definitions.
        /// </summary>
        [JsonProperty("customDataTypeDefinitions", NullValueHandling = NullValueHandling.Ignore)]
        public List<CustomDataTypeDefinitionElement> CustomDataTypeDefinitions { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// All Device Models in the data
        /// </summary>
        [JsonProperty("deviceModels", NullValueHandling = NullValueHandling.Ignore)]
        public List<DeviceModelElement> DeviceModels { get; set; }

        /// <summary>
        /// All Devices in the data
        /// </summary>
        [JsonProperty("devices", NullValueHandling = NullValueHandling.Ignore)]
        public List<DeviceElement> Devices { get; set; }

        /// <summary>
        /// All Farms in the data
        /// </summary>
        [JsonProperty("farms", NullValueHandling = NullValueHandling.Ignore)]
        public List<FarmElement> Farms { get; set; }

        /// <summary>
        /// All Field Boundaries in the data
        /// </summary>
        [JsonProperty("fieldBoundaries", NullValueHandling = NullValueHandling.Ignore)]
        public List<FieldBoundaryElement> FieldBoundaries { get; set; }

        /// <summary>
        /// All Fields in the data
        /// </summary>
        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public List<FieldElement> Fields { get; set; }

        /// <summary>
        /// All Growers in the data
        /// </summary>
        [JsonProperty("growers", NullValueHandling = NullValueHandling.Ignore)]
        public List<GrowerElement> Growers { get; set; }

        /// <summary>
        /// All Guidance Groups in the data
        /// </summary>
        [JsonProperty("guidanceGroups", NullValueHandling = NullValueHandling.Ignore)]
        public List<GuidanceGroupElement> GuidanceGroups { get; set; }

        /// <summary>
        /// All Guidance Patterns in the data
        /// </summary>
        [JsonProperty("guidancePatterns", NullValueHandling = NullValueHandling.Ignore)]
        public List<GuidancePatternElement> GuidancePatterns { get; set; }

        /// <summary>
        /// All Manufacturers in the data
        /// </summary>
        [JsonProperty("manufacturers", NullValueHandling = NullValueHandling.Ignore)]
        public List<ManufacturerElement> Manufacturers { get; set; }

        /// <summary>
        /// All Parties in the data
        /// </summary>
        [JsonProperty("parties", NullValueHandling = NullValueHandling.Ignore)]
        public List<PartyElement> Parties { get; set; }

        /// <summary>
        /// All Products in the data
        /// </summary>
        [JsonProperty("products", NullValueHandling = NullValueHandling.Ignore)]
        public List<ProductElement> Products { get; set; }

        /// <summary>
        /// All Seasons in the data
        /// </summary>
        [JsonProperty("seasons", NullValueHandling = NullValueHandling.Ignore)]
        public List<SeasonElement> Seasons { get; set; }
    }

    /// <summary>
    /// A trade name under which a Manufacturer markets a good. Also known as Make in
    /// vehicles/equipment.
    /// </summary>
    public partial class BrandElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("manufacturerId", NullValueHandling = NullValueHandling.Ignore)]
        public string ManufacturerId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    /// <summary>
    /// Additional information with which a data element is tagged.
    /// </summary>
    public partial class ContextItemElement
    {
        /// <summary>
        /// Nested Context Items used as the value for this Context item. Either this property or
        /// Value Text is required.
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("definitionCode")]
        public string DefinitionCode { get; set; }

        /// <summary>
        /// Any Time Scopes governing the Context Item
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }

        [JsonProperty("valueText", NullValueHandling = NullValueHandling.Ignore)]
        public string ValueText { get; set; }
    }

    /// <summary>
    /// A period of time, optionally containing a defined start or end,  locational context, or
    /// simply duration.
    /// </summary>
    public partial class TimeScopeElement
    {
        [JsonProperty("dateContextCode")]
        public string DateContextCode { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        [JsonProperty("end", NullValueHandling = NullValueHandling.Ignore)]
        public string End { get; set; }

        [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
        public string Start { get; set; }
    }

    /// <summary>
    /// Identification entity that defines both an integer instance id (as a primary key) and a
    /// collection of persistent identifiers
    /// </summary>
    public partial class Id
    {
        [JsonProperty("referenceId")]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Optional persistent ids for this component.
        /// </summary>
        [JsonProperty("uniqueIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<UniqueIdElement> UniqueIds { get; set; }
    }

    /// <summary>
    /// A persistent identifier for an entity as defined by a specific source.
    /// </summary>
    public partial class UniqueIdElement
    {
        [JsonProperty("idSource", NullValueHandling = NullValueHandling.Ignore)]
        public string IdSource { get; set; }

        [JsonProperty("idSourceTypeCode", NullValueHandling = NullValueHandling.Ignore)]
        public string IdSourceTypeCode { get; set; }

        [JsonProperty("idText")]
        public string IdText { get; set; }

        [JsonProperty("idTypeCode")]
        public string IdTypeCode { get; set; }
    }

    /// <summary>
    /// A more detailed representation of/within a Field, defining a crop, its growing season and
    /// usually a separate boundary.   Where Crop Zone is used, Field is also required.
    /// </summary>
    public partial class CropZoneElement
    {
        [JsonProperty("arableArea", NullValueHandling = NullValueHandling.Ignore)]
        public ArableArea ArableArea { get; set; }

        [JsonProperty("boundary", NullValueHandling = NullValueHandling.Ignore)]
        public Boundary Boundary { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("cropId")]
        public string CropId { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("fieldId")]
        public string FieldId { get; set; }

        /// <summary>
        /// Mappings to any Guidance Groups for this Crop Zone
        /// </summary>
        [JsonProperty("guidanceGroupIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> GuidanceGroupIds { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Any Notes on the Crop Zone
        /// </summary>
        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Notes { get; set; }

        /// <summary>
        /// One or more seasons to which this Cropzone relates.
        /// </summary>
        [JsonProperty("seasonIds")]
        public List<string> SeasonIds { get; set; }

        /// <summary>
        /// Any Time Scopes describing the Crop Zone.   Season should be reported separately via
        /// Season Ids.
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }
    }

    /// <summary>
    /// Total area of the Field that is cultivated, excluding areas such as waterways
    /// </summary>
    public partial class ArableArea
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// An unattributed geospatial definition of an enclosed region, optionally including source
    /// metadata.
    /// </summary>
    public partial class Boundary
    {
        [JsonProperty("boundaryCreationMethodCode", NullValueHandling = NullValueHandling.Ignore)]
        public string BoundaryCreationMethodCode { get; set; }

        [JsonProperty("geometry")]
        public string Geometry { get; set; }

        [JsonProperty("gNSSBaseStationTypeCode", NullValueHandling = NullValueHandling.Ignore)]
        public string GNssBaseStationTypeCode { get; set; }

        [JsonProperty("gNSSBaseSurveyTypeCode", NullValueHandling = NullValueHandling.Ignore)]
        public string GNssBaseSurveyTypeCode { get; set; }

        [JsonProperty("gNSSCorrectionNetworkBrand", NullValueHandling = NullValueHandling.Ignore)]
        public string GNssCorrectionNetworkBrand { get; set; }

        [JsonProperty("gNSSCorrectionNetworkName", NullValueHandling = NullValueHandling.Ignore)]
        public string GNssCorrectionNetworkName { get; set; }

        /// <summary>
        /// Collection of metrics supplied to document the quality of a GNSS dataset.  Comprised of
        /// Data Types scoped at the GNSS Data Quality Metrics component.
        /// </summary>
        [JsonProperty("gNSSDataQualityMetrics", NullValueHandling = NullValueHandling.Ignore)]
        public List<GNssDataQualityMetricElement> GNssDataQualityMetrics { get; set; }

        [JsonProperty("gNSSMobileBaseStationMetadata", NullValueHandling = NullValueHandling.Ignore)]
        public GNssMobileBaseStationMetadata GNssMobileBaseStationMetadata { get; set; }

        [JsonProperty("gNSSReceiverMetadata", NullValueHandling = NullValueHandling.Ignore)]
        public GNssReceiverMetadata GNssReceiverMetadata { get; set; }

        [JsonProperty("highDefinitionSourceLayerId", NullValueHandling = NullValueHandling.Ignore)]
        public string HighDefinitionSourceLayerId { get; set; }

        /// <summary>
        /// Definition of parties involved in the boundary creation.   PartyRole code COLLECTOR is
        /// intended to define the party that drove or "collected" the data for the boundary.
        /// </summary>
        [JsonProperty("partyRoles", NullValueHandling = NullValueHandling.Ignore)]
        public List<PartyRoleElement> PartyRoles { get; set; }
    }

    /// <summary>
    /// Metric supplied to document the quality of a GNSS dataset.
    /// </summary>
    public partial class GNssDataQualityMetricElement
    {
        [JsonProperty("definitionCode")]
        public string DefinitionCode { get; set; }

        [JsonProperty("valueText")]
        public string ValueText { get; set; }
    }

    /// <summary>
    /// Information about the GNSS Base Station used in the collection of spatial data
    /// </summary>
    public partial class GNssMobileBaseStationMetadata
    {
        [JsonProperty("baseStationPosition", NullValueHandling = NullValueHandling.Ignore)]
        public string BaseStationPosition { get; set; }

        [JsonProperty("deviceId", NullValueHandling = NullValueHandling.Ignore)]
        public string DeviceId { get; set; }

        [JsonProperty("surveyTime", NullValueHandling = NullValueHandling.Ignore)]
        public SurveyTime SurveyTime { get; set; }
    }

    /// <summary>
    /// The amount of time a GNSS reference station spends collecting data to establish a precise
    /// position.
    /// </summary>
    public partial class SurveyTime
    {
        [JsonProperty("dateContextCode")]
        public string DateContextCode { get; set; }

        [JsonProperty("duration", NullValueHandling = NullValueHandling.Ignore)]
        public double? Duration { get; set; }

        [JsonProperty("end", NullValueHandling = NullValueHandling.Ignore)]
        public string End { get; set; }

        [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
        public string Start { get; set; }
    }

    /// <summary>
    /// Information about the GNSS receiver used to record spatial data.
    /// </summary>
    public partial class GNssReceiverMetadata
    {
        [JsonProperty("appliedOffsets", NullValueHandling = NullValueHandling.Ignore)]
        public AppliedOffsets AppliedOffsets { get; set; }

        [JsonProperty("deviceId", NullValueHandling = NullValueHandling.Ignore)]
        public string DeviceId { get; set; }

        [JsonProperty("loggingRate")]
        public double LoggingRate { get; set; }
    }

    /// <summary>
    /// For informational purposes, spatial offsets from a source point such as a GNSS receiver
    /// that have been applied by the data producer. ADAPT requires all offsets to be applied in
    /// mapped data, and this property is to be used only for geospatial data quality assessments
    /// and data provenance.  In no circumstances will the data consumer need to apply these data
    /// to any geometry.
    /// </summary>
    public partial class AppliedOffsets
    {
        [JsonProperty("xOffset", NullValueHandling = NullValueHandling.Ignore)]
        public XOffset XOffset { get; set; }

        [JsonProperty("yOffset", NullValueHandling = NullValueHandling.Ignore)]
        public YOffset YOffset { get; set; }

        [JsonProperty("zOffset", NullValueHandling = NullValueHandling.Ignore)]
        public ZOffset ZOffset { get; set; }
    }

    /// <summary>
    /// Offset in the X (inline) direction.  Positive values are forward, negative values are
    /// backward.
    /// </summary>
    public partial class XOffset
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// Offset in the Y (lateral) direction.  Positive values are right, negative values are left.
    /// </summary>
    public partial class YOffset
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// Offset in the Z (Vertical) direction.  Positive values are upward.
    /// </summary>
    public partial class ZOffset
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// The function assumed by an individual or business entity for a specific time and purpose.
    /// </summary>
    public partial class PartyRoleElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("partyId")]
        public string PartyId { get; set; }

        [JsonProperty("roleCode")]
        public string RoleCode { get; set; }

        /// <summary>
        /// Any Time Scopes that limit the period in which this role applies.
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }
    }

    /// <summary>
    /// A plant or animal type cultivated for agricultural produce.
    /// </summary>
    public partial class CropElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("parentId", NullValueHandling = NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        [JsonProperty("referenceWeight", NullValueHandling = NullValueHandling.Ignore)]
        public ReferenceWeight ReferenceWeight { get; set; }

        [JsonProperty("standardPayableMoisture", NullValueHandling = NullValueHandling.Ignore)]
        public StandardPayableMoisture StandardPayableMoisture { get; set; }
    }

    /// <summary>
    /// Reference weight for the crop.
    /// </summary>
    public partial class ReferenceWeight
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// The targeted moisture value at which the commodity is sold
    /// </summary>
    public partial class StandardPayableMoisture
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// A user-defined Data Type Definition per ADAPT model instance.
    /// </summary>
    public partial class CustomDataTypeDefinitionElement
    {
        [JsonProperty("dataDefinitionBaseTypeCode")]
        public string DataDefinitionBaseTypeCode { get; set; }

        [JsonProperty("dataDefinitionStatusCode")]
        public string DataDefinitionStatusCode { get; set; }

        [JsonProperty("definitionCode")]
        public string DefinitionCode { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("enumeratedDataTypeDefinitionAttributes", NullValueHandling = NullValueHandling.Ignore)]
        public EnumeratedDataTypeDefinitionAttributes EnumeratedDataTypeDefinitionAttributes { get; set; }

        /// <summary>
        /// Any specific Geo Political Contexts to which the Data Type Definition applies
        /// </summary>
        [JsonProperty("geoPoliticalContexts", NullValueHandling = NullValueHandling.Ignore)]
        public List<GeoPoliticalContextElement> GeoPoliticalContexts { get; set; }

        [JsonProperty("keywords", NullValueHandling = NullValueHandling.Ignore)]
        public string Keywords { get; set; }

        /// <summary>
        /// Names for this Data Type Definition in other languages.
        /// </summary>
        [JsonProperty("labels", NullValueHandling = NullValueHandling.Ignore)]
        public List<LabelElement> Labels { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("numericDataTypeDefinitionAttributes", NullValueHandling = NullValueHandling.Ignore)]
        public NumericDataTypeDefinitionAttributes NumericDataTypeDefinitionAttributes { get; set; }

        /// <summary>
        /// The names of ADAPT Standard components to which this Data Type Definition may be applied,
        /// either as a Context Item or to a defined property such as a Variable.
        /// </summary>
        [JsonProperty("scopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Scopes { get; set; }

        [JsonProperty("supersededByCode", NullValueHandling = NullValueHandling.Ignore)]
        public string SupersededByCode { get; set; }

        [JsonProperty("textDataTypeDefinitionAttributes", NullValueHandling = NullValueHandling.Ignore)]
        public TextDataTypeDefinitionAttributes TextDataTypeDefinitionAttributes { get; set; }
    }

    /// <summary>
    /// Data Type Definition attributes specific to enumerated types
    /// </summary>
    public partial class EnumeratedDataTypeDefinitionAttributes
    {
        [JsonProperty("default", NullValueHandling = NullValueHandling.Ignore)]
        public double? Default { get; set; }

        [JsonProperty("items")]
        public List<ItemElement> Items { get; set; }
    }

    /// <summary>
    /// List of enumerated items within an enumeration.
    ///
    /// An enumeration item within an enumeration
    /// </summary>
    public partial class ItemElement
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("enumerationItemStatusCode")]
        public string EnumerationItemStatusCode { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("supersededByCode", NullValueHandling = NullValueHandling.Ignore)]
        public string SupersededByCode { get; set; }
    }

    /// <summary>
    /// The Country/Region to which a concept applies
    /// </summary>
    public partial class GeoPoliticalContextElement
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("geoNamesId", NullValueHandling = NullValueHandling.Ignore)]
        public string GeoNamesId { get; set; }

        [JsonProperty("iSO3166-2Code")]
        public string ISo31662Code { get; set; }
    }

    /// <summary>
    /// A version of text represented in a specific language.
    /// </summary>
    public partial class LabelElement
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("languageCode")]
        public string LanguageCode { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    /// <summary>
    /// Attributes for Numeric Data Types
    /// </summary>
    public partial class NumericDataTypeDefinitionAttributes
    {
        [JsonProperty("default", NullValueHandling = NullValueHandling.Ignore)]
        public double? Default { get; set; }

        [JsonProperty("maximum", NullValueHandling = NullValueHandling.Ignore)]
        public double? Maximum { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public double? Minimum { get; set; }

        [JsonProperty("numericDataTypeCode")]
        public string NumericDataTypeCode { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// Data Type Definition attributes specific to the text type
    /// </summary>
    public partial class TextDataTypeDefinitionAttributes
    {
        [JsonProperty("validationRegularExpression", NullValueHandling = NullValueHandling.Ignore)]
        public string ValidationRegularExpression { get; set; }
    }

    /// <summary>
    /// A prototypical model of equipment to be instantiated in one or more Devices.
    /// </summary>
    public partial class DeviceModelElement
    {
        [JsonProperty("brandId", NullValueHandling = NullValueHandling.Ignore)]
        public string BrandId { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("deviceSeries", NullValueHandling = NullValueHandling.Ignore)]
        public string DeviceSeries { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    /// <summary>
    /// Equipment that logs data
    /// </summary>
    public partial class DeviceElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("deviceModelId", NullValueHandling = NullValueHandling.Ignore)]
        public string DeviceModelId { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("serialNumber", NullValueHandling = NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    }

    /// <summary>
    /// A collection of fields grouped together as a common organizational unit, often reflecting
    /// shared location or historical ownership.
    /// </summary>
    public partial class FarmElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("growerId", NullValueHandling = NullValueHandling.Ignore)]
        public string GrowerId { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("partyId", NullValueHandling = NullValueHandling.Ignore)]
        public string PartyId { get; set; }
    }

    /// <summary>
    /// A geometry that identifies the geospatial coordinates of a field. The boundary can be
    /// used to define the area for a particular operation, a particular crop or crops, or for
    /// legal purposes. A field can have different boundaries that may vary in geometry based on
    /// their specific use, but it is always either a polygon or multi-polygon.
    /// </summary>
    public partial class FieldBoundaryElement
    {
        [JsonProperty("boundary")]
        public Boundary Boundary { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("fieldId")]
        public string FieldId { get; set; }

        [JsonProperty("headlands", NullValueHandling = NullValueHandling.Ignore)]
        public List<HeadlandElement> Headlands { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("obstacles", NullValueHandling = NullValueHandling.Ignore)]
        public List<ObstacleElement> Obstacles { get; set; }

        /// <summary>
        /// Any specific Seasons to which this boundary applies.
        /// </summary>
        [JsonProperty("seasonIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SeasonIds { get; set; }
    }

    /// <summary>
    /// A collection of Headlands
    ///
    /// Ground near the ends of a field that is cultivated differently than the main body of the
    /// field
    /// </summary>
    public partial class HeadlandElement
    {
        [JsonProperty("boundary")]
        public Boundary Boundary { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    /// <summary>
    /// Any Obstacles within a Field Boundary
    ///
    /// A spatial object that directly affects the execution of a field operation, such as a
    /// waterway, rockpile, or grove of trees.
    /// </summary>
    public partial class ObstacleElement
    {
        [JsonProperty("boundary")]
        public Boundary Boundary { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("isPassable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsPassable { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    /// <summary>
    /// A named, farmer-accepted physical space where production agriculture takes place.  Used
    /// to partition and identify data.
    /// </summary>
    public partial class FieldElement
    {
        [JsonProperty("activeBoundaryId", NullValueHandling = NullValueHandling.Ignore)]
        public string ActiveBoundaryId { get; set; }

        [JsonProperty("arableArea", NullValueHandling = NullValueHandling.Ignore)]
        public ArableArea ArableArea { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("farmId", NullValueHandling = NullValueHandling.Ignore)]
        public string FarmId { get; set; }

        /// <summary>
        /// Mappings to any Guidance Groups for this Field
        /// </summary>
        [JsonProperty("guidanceGroupIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> GuidanceGroupIds { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("timeZone", NullValueHandling = NullValueHandling.Ignore)]
        public string TimeZone { get; set; }
    }

    /// <summary>
    /// An individual/business entity engaged in agricultural production.
    /// </summary>
    public partial class GrowerElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("partyId", NullValueHandling = NullValueHandling.Ignore)]
        public string PartyId { get; set; }
    }

    /// <summary>
    /// A container for guidance patterns to be used together, e.g., a headland pattern and a
    /// main field pattern
    /// </summary>
    public partial class GuidanceGroupElement
    {
        [JsonProperty("boundary", NullValueHandling = NullValueHandling.Ignore)]
        public Boundary Boundary { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// List of the Guidance Patterns in this Group.   Required.
        /// </summary>
        [JsonProperty("guidancePatternIds")]
        public List<string> GuidancePatternIds { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    /// <summary>
    /// A geospatial definition used to guide a vehicle in a field
    /// </summary>
    public partial class GuidancePatternElement
    {
        [JsonProperty("aBCurveAttributes", NullValueHandling = NullValueHandling.Ignore)]
        public ABCurveAttributes ABCurveAttributes { get; set; }

        [JsonProperty("aBLineAttributes", NullValueHandling = NullValueHandling.Ignore)]
        public ABLineAttributes ABLineAttributes { get; set; }

        [JsonProperty("aPlusAttributes", NullValueHandling = NullValueHandling.Ignore)]
        public APlusAttributes APlusAttributes { get; set; }

        [JsonProperty("boundary", NullValueHandling = NullValueHandling.Ignore)]
        public Boundary Boundary { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("guidancePatternExtensionCode", NullValueHandling = NullValueHandling.Ignore)]
        public string GuidancePatternExtensionCode { get; set; }

        [JsonProperty("guidancePatternPropagationDirectionCode", NullValueHandling = NullValueHandling.Ignore)]
        public string GuidancePatternPropagationDirectionCode { get; set; }

        [JsonProperty("guidancePatternTypeCode")]
        public string GuidancePatternTypeCode { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("numberOfSwathsLeft", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumberOfSwathsLeft { get; set; }

        [JsonProperty("numberOfSwathsRight", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumberOfSwathsRight { get; set; }

        [JsonProperty("pivotAttributes", NullValueHandling = NullValueHandling.Ignore)]
        public PivotAttributes PivotAttributes { get; set; }

        [JsonProperty("spiralAttributes", NullValueHandling = NullValueHandling.Ignore)]
        public SpiralAttributes SpiralAttributes { get; set; }

        [JsonProperty("swathWidth", NullValueHandling = NullValueHandling.Ignore)]
        public SwathWidth SwathWidth { get; set; }
    }

    /// <summary>
    /// Relevant attributes for an ABCurve Guidance Pattern
    /// </summary>
    public partial class ABCurveAttributes
    {
        [JsonProperty("heading", NullValueHandling = NullValueHandling.Ignore)]
        public double? Heading { get; set; }

        [JsonProperty("lineStrings")]
        public string LineStrings { get; set; }

        [JsonProperty("numberOfSegments")]
        public long NumberOfSegments { get; set; }
    }

    /// <summary>
    /// Relevant attributes for the ABLine guidance pattern
    /// </summary>
    public partial class ABLineAttributes
    {
        [JsonProperty("a")]
        public string A { get; set; }

        [JsonProperty("b")]
        public string B { get; set; }

        [JsonProperty("heading", NullValueHandling = NullValueHandling.Ignore)]
        public double? Heading { get; set; }
    }

    /// <summary>
    /// Relevant attributes for APlus Guidance Patterns
    /// </summary>
    public partial class APlusAttributes
    {
        [JsonProperty("a")]
        public string A { get; set; }

        [JsonProperty("heading")]
        public double Heading { get; set; }
    }

    /// <summary>
    /// Relevant Attributes for the Pivot Guidance Pattern.   One of the three pivot definitions
    /// is required.
    /// </summary>
    public partial class PivotAttributes
    {
        [JsonProperty("centerPoint")]
        public string CenterPoint { get; set; }

        [JsonProperty("endPoint", NullValueHandling = NullValueHandling.Ignore)]
        public string EndPoint { get; set; }

        [JsonProperty("isClockwise", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsClockwise { get; set; }

        [JsonProperty("radius")]
        public Radius Radius { get; set; }

        [JsonProperty("startPoint", NullValueHandling = NullValueHandling.Ignore)]
        public string StartPoint { get; set; }
    }

    /// <summary>
    /// The radius of a center pivot
    /// </summary>
    public partial class Radius
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// Relevant attributes for the Spiral Guidance Pattern type
    /// </summary>
    public partial class SpiralAttributes
    {
        [JsonProperty("lineStrings")]
        public string LineStrings { get; set; }
    }

    /// <summary>
    /// A defined width of a point or pass on a field, based on the implement's active width.
    /// </summary>
    public partial class SwathWidth
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// The entity who manufactured a given market good.
    /// </summary>
    public partial class ManufacturerElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    /// <summary>
    /// A business entity or individual
    /// </summary>
    public partial class PartyElement
    {
        [JsonProperty("contactInfo", NullValueHandling = NullValueHandling.Ignore)]
        public ContactInfo ContactInfo { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("parentPartyId", NullValueHandling = NullValueHandling.Ignore)]
        public string ParentPartyId { get; set; }

        [JsonProperty("partyTypeCode")]
        public string PartyTypeCode { get; set; }
    }

    /// <summary>
    /// Contact Information for an individual/business entity
    /// </summary>
    public partial class ContactInfo
    {
        /// <summary>
        /// Any Addresses as part of this Contact Info
        /// </summary>
        [JsonProperty("addressContactMethods", NullValueHandling = NullValueHandling.Ignore)]
        public List<AddressContactMethodElement> AddressContactMethods { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        /// <summary>
        /// Any telephone numbers/email addresses as part of this Contact Info
        /// </summary>
        [JsonProperty("telecommunicationContactMethods", NullValueHandling = NullValueHandling.Ignore)]
        public List<TelecommunicationContactMethodElement> TelecommunicationContactMethods { get; set; }
    }

    /// <summary>
    /// An address for someone or something.
    /// </summary>
    public partial class AddressContactMethodElement
    {
        [JsonProperty("addressContactTypeCode")]
        public string AddressContactTypeCode { get; set; }

        /// <summary>
        /// Address lines that precede the City.   Street address, PO Box, etc.
        /// </summary>
        [JsonProperty("addressLines", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AddressLines { get; set; }

        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("countryCode", NullValueHandling = NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        [JsonProperty("countrySubdivision", NullValueHandling = NullValueHandling.Ignore)]
        public string CountrySubdivision { get; set; }

        [JsonProperty("postalCode", NullValueHandling = NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    }

    /// <summary>
    /// A telephone number or email address
    /// </summary>
    public partial class TelecommunicationContactMethodElement
    {
        [JsonProperty("telecommunicationContactTypeCode")]
        public string TelecommunicationContactTypeCode { get; set; }

        [JsonProperty("valueText")]
        public string ValueText { get; set; }
    }

    /// <summary>
    /// Agricultural input or produce
    /// </summary>
    public partial class ProductElement
    {
        [JsonProperty("brandId", NullValueHandling = NullValueHandling.Ignore)]
        public string BrandId { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("cropId", NullValueHandling = NullValueHandling.Ignore)]
        public string CropId { get; set; }

        [JsonProperty("density", NullValueHandling = NullValueHandling.Ignore)]
        public Density Density { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("manufacturerId", NullValueHandling = NullValueHandling.Ignore)]
        public string ManufacturerId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Optional list of the components that make up this product.
        /// </summary>
        [JsonProperty("productComponents", NullValueHandling = NullValueHandling.Ignore)]
        public List<ProductComponentElement> ProductComponents { get; set; }

        [JsonProperty("productFormCode")]
        public string ProductFormCode { get; set; }

        [JsonProperty("productStatusCode", NullValueHandling = NullValueHandling.Ignore)]
        public string ProductStatusCode { get; set; }

        [JsonProperty("productTypeCode")]
        public string ProductTypeCode { get; set; }

        [JsonProperty("specificGravity", NullValueHandling = NullValueHandling.Ignore)]
        public double? SpecificGravity { get; set; }

        /// <summary>
        /// For Crop Variety products, list of traits. Optional.
        /// </summary>
        [JsonProperty("traits", NullValueHandling = NullValueHandling.Ignore)]
        public List<TraitElement> Traits { get; set; }
    }

    /// <summary>
    /// The density of the product (mass per volume)
    /// </summary>
    public partial class Density
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// Details on an individual component that comprises part of a Product.
    /// </summary>
    public partial class ProductComponentElement
    {
        [JsonProperty("amount")]
        public Amount Amount { get; set; }

        [JsonProperty("ingredientId", NullValueHandling = NullValueHandling.Ignore)]
        public IngredientId IngredientId { get; set; }

        [JsonProperty("isCarrier", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsCarrier { get; set; }

        [JsonProperty("mixOrder", NullValueHandling = NullValueHandling.Ignore)]
        public long? MixOrder { get; set; }

        [JsonProperty("productId", NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }
    }

    /// <summary>
    /// Amount of a product component within the parent product.  Valid amounts are in volume or
    /// mass per volume or mass.  E.g.s, 3 floz1gal-1, 0.26 lb1lb-1, 1oz1gal-1.   For
    /// ingredients, amounts may be expressed as percentages.
    /// </summary>
    public partial class Amount
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// A product component defined by a meaningful code and not further subdivided into
    /// components.
    /// </summary>
    public partial class IngredientId
    {
        [JsonProperty("ingredientCode")]
        public string IngredientCode { get; set; }

        [JsonProperty("ingredientCodeSource", NullValueHandling = NullValueHandling.Ignore)]
        public string IngredientCodeSource { get; set; }

        [JsonProperty("isActiveIngredient", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsActiveIngredient { get; set; }
    }

    /// <summary>
    /// Genetic attribute of a seed variety
    /// </summary>
    public partial class TraitElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("manufacturerId", NullValueHandling = NullValueHandling.Ignore)]
        public string ManufacturerId { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("traitCode")]
        public string TraitCode { get; set; }
    }

    /// <summary>
    /// The span of time for which field operations contribute to a particular growing season.
    /// For many areas, this is approximately a year in length.  E.g., In the northern
    /// hemisphere, Season "2022" may extend from the first operations following harvest in the
    /// fall of 2021 to the last harvest activities in the fall of 2022.  As such, seasons may
    /// overlap in months where harvest operations in the prior season are ongoing as field prep
    /// and fertilizer operations are starting for the new season.
    /// </summary>
    public partial class SeasonElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("end", NullValueHandling = NullValueHandling.Ignore)]
        public string End { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
        public string Start { get; set; }
    }

    /// <summary>
    /// Container for transactional, frequently changing data.   Documents will necessarily
    /// reference master data defined in the Catalog.
    /// </summary>
    public partial class Documents
    {
        /// <summary>
        /// All Plans in the data
        /// </summary>
        [JsonProperty("plans", NullValueHandling = NullValueHandling.Ignore)]
        public List<PlanElement> Plans { get; set; }

        /// <summary>
        /// All Recommendations in the data
        /// </summary>
        [JsonProperty("recommendations", NullValueHandling = NullValueHandling.Ignore)]
        public List<RecommendationElement> Recommendations { get; set; }

        /// <summary>
        /// All Reference Layers in the data
        /// </summary>
        [JsonProperty("referenceLayers", NullValueHandling = NullValueHandling.Ignore)]
        public List<ReferenceLayerElement> ReferenceLayers { get; set; }

        /// <summary>
        /// All Work Orders in the data
        /// </summary>
        [JsonProperty("workOrders", NullValueHandling = NullValueHandling.Ignore)]
        public List<WorkOrderElement> WorkOrders { get; set; }

        /// <summary>
        /// All Work Records in the data
        /// </summary>
        [JsonProperty("workRecords", NullValueHandling = NullValueHandling.Ignore)]
        public List<WorkRecordElement> WorkRecords { get; set; }
    }

    /// <summary>
    /// Document collecting operational intent for a growing season. A plan may define a
    /// collection of intended Crop Zones, defining a crop for each field/partial field and may
    /// further define dates and intended operations (WorkItems).  Alternatively, a Plan may
    /// simply define a number of acres of a given crop to be planted across the operation.
    /// Multiple mutually exclusive plans may exist for a single season to allow for runtime
    /// flexibility. A plan documents management intent.
    /// </summary>
    public partial class PlanElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        /// <summary>
        /// Mappings to any Crops in this document.
        /// </summary>
        [JsonProperty("cropIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CropIds { get; set; }

        /// <summary>
        /// Mappings to any Crop Zones in this document.
        /// </summary>
        [JsonProperty("cropZoneIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CropZoneIds { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Optional collection of correlations to other Documents within this data instance.
        /// </summary>
        [JsonProperty("documentCorrelations", NullValueHandling = NullValueHandling.Ignore)]
        public List<DocumentCorrelationElement> DocumentCorrelations { get; set; }

        [JsonProperty("estimatedArea", NullValueHandling = NullValueHandling.Ignore)]
        public EstimatedArea EstimatedArea { get; set; }

        /// <summary>
        /// Mappings to any Fields in this document.
        /// </summary>
        [JsonProperty("fieldIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldIds { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Any Notes on the Document
        /// </summary>
        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Notes { get; set; }

        /// <summary>
        /// Operations that make up the Plan.  Required.
        /// </summary>
        [JsonProperty("operations")]
        public List<OperationElement> Operations { get; set; }

        [JsonProperty("seasonId", NullValueHandling = NullValueHandling.Ignore)]
        public string SeasonId { get; set; }

        /// <summary>
        /// Any Time Scopes describing the Document
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }
    }

    /// <summary>
    /// An object defining the relationship between two document objects.
    /// </summary>
    public partial class DocumentCorrelationElement
    {
        [JsonProperty("documentRelationshipTypeCode")]
        public string DocumentRelationshipTypeCode { get; set; }

        [JsonProperty("originatingDocumentId")]
        public string OriginatingDocumentId { get; set; }
    }

    /// <summary>
    /// Numeric value for Estimated Area.
    /// </summary>
    public partial class EstimatedArea
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// Records for a single OperationType on a single Field at one time.  If Device
    /// Configuration is specified (implements are known), data from each separate Device must be
    /// in a separate Operation.
    /// </summary>
    public partial class OperationElement
    {
        [JsonProperty("boundary", NullValueHandling = NullValueHandling.Ignore)]
        public Boundary Boundary { get; set; }

        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("deviceConfiguration", NullValueHandling = NullValueHandling.Ignore)]
        public DeviceConfiguration DeviceConfiguration { get; set; }

        /// <summary>
        /// Any Guidance Allocations associated to this Operation
        /// </summary>
        [JsonProperty("guidanceAllocations", NullValueHandling = NullValueHandling.Ignore)]
        public List<GuidanceAllocationElement> GuidanceAllocations { get; set; }

        [JsonProperty("harvestLoadIdentifier", NullValueHandling = NullValueHandling.Ignore)]
        public string HarvestLoadIdentifier { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Any Notes on the Operation
        /// </summary>
        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Notes { get; set; }

        [JsonProperty("operationTypeCode")]
        public string OperationTypeCode { get; set; }

        /// <summary>
        /// Any Parties/Roles associated to this Operation.  E.g., the equipment operator for the
        /// Operation.
        /// </summary>
        [JsonProperty("partyRoles", NullValueHandling = NullValueHandling.Ignore)]
        public List<PartyRoleElement> PartyRoles { get; set; }

        [JsonProperty("prescribingOperationId", NullValueHandling = NullValueHandling.Ignore)]
        public string PrescribingOperationId { get; set; }

        /// <summary>
        /// List of mappings to Products used in the Operation.
        /// </summary>
        [JsonProperty("productIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ProductIds { get; set; }

        /// <summary>
        /// Mappings to any Reference Layers relating to this Operation
        /// </summary>
        [JsonProperty("referenceLayerIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ReferenceLayerIds { get; set; }

        [JsonProperty("spatialRecordsFile", NullValueHandling = NullValueHandling.Ignore)]
        public string SpatialRecordsFile { get; set; }

        /// <summary>
        /// Averages or Totals for specific Variables used either as manually-entered logged data or
        /// flat rate prescriptions.   Where a Summary Value maps to a Variable with a (spatial) File
        /// Data Index, the Summary Value can be interpreted to summarize the spatial data in that
        /// column.
        /// </summary>
        [JsonProperty("summaryValues", NullValueHandling = NullValueHandling.Ignore)]
        public List<SummaryValueElement> SummaryValues { get; set; }

        /// <summary>
        /// Any Time Scopes on the Operation.   E.g., the Start and End time of the Operation.
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }

        /// <summary>
        /// Variables used within Spatial Records and/or Summary Values.   Usually required unless
        /// the Operation simply records general information without any rates or totals. E.g., that
        /// a certain field was planted with a particular product.
        ///
        /// Variables describe the data logged within a completed Operation, and the prescribed rates
        /// for a planned Operation.
        /// </summary>
        [JsonProperty("variables", NullValueHandling = NullValueHandling.Ignore)]
        public List<VariableElement> Variables { get; set; }
    }

    /// <summary>
    /// Temporary configuration information for a Device within transactional Documents
    /// information.
    /// </summary>
    public partial class DeviceConfiguration
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("deviceId")]
        public string DeviceId { get; set; }
    }

    /// <summary>
    /// A instance of specific Guidance Pattern data as applied to a planned or actual field
    /// operation.
    /// </summary>
    public partial class GuidanceAllocationElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("guidanceGroupId")]
        public string GuidanceGroupId { get; set; }

        [JsonProperty("guidanceShift", NullValueHandling = NullValueHandling.Ignore)]
        public GuidanceShift GuidanceShift { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Any Time Scopes defining the application of the Guidance Allocation
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }
    }

    /// <summary>
    /// Shift information added to Guidance Patterns during a specific field operation, mapped to
    /// that LoggedData via the Guidance Allocation component
    /// </summary>
    public partial class GuidanceShift
    {
        [JsonProperty("eastShift", NullValueHandling = NullValueHandling.Ignore)]
        public EastShift EastShift { get; set; }

        [JsonProperty("guidanceGroupId", NullValueHandling = NullValueHandling.Ignore)]
        public string GuidanceGroupId { get; set; }

        [JsonProperty("guidancePatternId", NullValueHandling = NullValueHandling.Ignore)]
        public string GuidancePatternId { get; set; }

        [JsonProperty("northShift", NullValueHandling = NullValueHandling.Ignore)]
        public NorthShift NorthShift { get; set; }

        [JsonProperty("propagationOffset", NullValueHandling = NullValueHandling.Ignore)]
        public PropagationOffset PropagationOffset { get; set; }

        /// <summary>
        /// Any Time Scopes governing the application of this Guidance Shift.
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }
    }

    /// <summary>
    /// The shift East of a guidance pattern
    /// </summary>
    public partial class EastShift
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// The North shift of a Guidance Pattern
    /// </summary>
    public partial class NorthShift
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// Perpendicular offset of a guidance pattern by a fixed offset.
    /// </summary>
    public partial class PropagationOffset
    {
        [JsonProperty("numericValue")]
        public double NumericValue { get; set; }

        [JsonProperty("unitOfMeasureCode")]
        public string UnitOfMeasureCode { get; set; }
    }

    /// <summary>
    /// A recorded value of a specific type, representing an average or total either calculated
    /// by a system or manually-entered by a user.   E.g.s., total amount of fuel used within an
    /// operation on a field,
    /// </summary>
    public partial class SummaryValueElement
    {
        [JsonProperty("valueText")]
        public string ValueText { get; set; }

        [JsonProperty("variableId")]
        public string VariableId { get; set; }
    }

    /// <summary>
    /// An individual type of measurement during a field operation that will be populated at
    /// multiple points in the field.
    /// </summary>
    public partial class VariableElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("defaultRate", NullValueHandling = NullValueHandling.Ignore)]
        public double? DefaultRate { get; set; }

        [JsonProperty("definitionCode")]
        public string DefinitionCode { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("fileDataIndex", NullValueHandling = NullValueHandling.Ignore)]
        public long? FileDataIndex { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("lossOfGNSSRate", NullValueHandling = NullValueHandling.Ignore)]
        public double? LossOfGnssRate { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("outOfFieldRate", NullValueHandling = NullValueHandling.Ignore)]
        public double? OutOfFieldRate { get; set; }

        [JsonProperty("productId", NullValueHandling = NullValueHandling.Ignore)]
        public string ProductId { get; set; }
    }

    /// <summary>
    /// Document summarizing guidance to a Grower from an advisor.  An example might be
    /// recommendations for amounts of specific crops to plant from a financial or market
    /// advisor, specific varieties or crop protection chemicals to use from an agronomic
    /// advisor, etc.
    ///
    /// E.g.s, if an advisor recommends a Grower plant a specific variety on 3 fields, the
    /// Recommendation.FieldIds would map to those fields, and there would be one Operation of
    /// type Application - Sowing and Planting simply referring to the product id of the
    /// recommended variety.
    ///
    /// If an advisor is recommending the Grower apply a certain crop protection chemical for all
    /// fields with a certain crop, the Recommendation.CropIds would map to a single crop, and
    /// there would be one Operation of type Application - Crop Protection, mapping to the
    /// product id of the specified chemical, optionally containing a Time Scopes object to
    /// specify the recommended date range.
    /// </summary>
    public partial class RecommendationElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        /// <summary>
        /// Mappings to any Crops in this document.
        /// </summary>
        [JsonProperty("cropIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CropIds { get; set; }

        /// <summary>
        /// Mappings to any Crop Zones in this document.
        /// </summary>
        [JsonProperty("cropZoneIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CropZoneIds { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Optional collection of correlations to other Documents within this data instance.
        /// </summary>
        [JsonProperty("documentCorrelations", NullValueHandling = NullValueHandling.Ignore)]
        public List<DocumentCorrelationElement> DocumentCorrelations { get; set; }

        [JsonProperty("estimatedArea", NullValueHandling = NullValueHandling.Ignore)]
        public EstimatedArea EstimatedArea { get; set; }

        /// <summary>
        /// Mappings to any Fields in this document.
        /// </summary>
        [JsonProperty("fieldIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldIds { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Any Notes on the Document
        /// </summary>
        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Notes { get; set; }

        /// <summary>
        /// Operations that make up the Recommendation. Required.
        /// </summary>
        [JsonProperty("operations")]
        public List<OperationElement> Operations { get; set; }

        [JsonProperty("seasonId", NullValueHandling = NullValueHandling.Ignore)]
        public string SeasonId { get; set; }

        /// <summary>
        /// Any Time Scopes describing the Document
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }
    }

    /// <summary>
    /// Preformatted geospatial layer to be referenced within the model
    /// </summary>
    public partial class ReferenceLayerElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        /// <summary>
        /// Mappings to any Crop Zones
        /// </summary>
        [JsonProperty("cropZoneIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CropZoneIds { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Mappings to any Fields
        /// </summary>
        [JsonProperty("fieldIds", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldIds { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("layerTypeCode")]
        public string LayerTypeCode { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("spatialRecordsFile")]
        public string SpatialRecordsFile { get; set; }

        /// <summary>
        /// Any Time Scopes governing this Reference Layer
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }

        /// <summary>
        /// The variables defined within the Reference Layer
        /// </summary>
        [JsonProperty("variables")]
        public List<VariableElement> Variables { get; set; }
    }

    /// <summary>
    /// Document summarizing the final collection of agronomic instructions (Operations) to be
    /// acted upon once operational decisions are taken. A work order documents operational
    /// decisions made.  A common example would be a list of fixed or variable rate
    /// prescriptions.
    ///
    /// The Operations represent agronomic instruction(s) for a single Field or Crop Zone at a
    /// single time.  Where a Crop is not known/relevant, the Work Order must reference a Field.
    /// Where a Crop is known, the Work Order must reference a CropZone.  Example WorkItems: a
    /// CropZone should be planted and fertilized on a particular date/date range, utilize a
    /// prescribed flat rate (Summary Value) or rates (Spatial Records File).  Prescriptions are
    /// represented as individual Operations.
    /// </summary>
    public partial class WorkOrderElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("cropZoneId", NullValueHandling = NullValueHandling.Ignore)]
        public string CropZoneId { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Optional collection of correlations to other Documents within this data instance.
        /// </summary>
        [JsonProperty("documentCorrelations", NullValueHandling = NullValueHandling.Ignore)]
        public List<DocumentCorrelationElement> DocumentCorrelations { get; set; }

        [JsonProperty("fieldId")]
        public string FieldId { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Any Notes on the Document
        /// </summary>
        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Notes { get; set; }

        /// <summary>
        /// The prescribed Operations that comprise this Work Order.  Required.
        /// </summary>
        [JsonProperty("operations")]
        public List<OperationElement> Operations { get; set; }

        [JsonProperty("seasonId", NullValueHandling = NullValueHandling.Ignore)]
        public string SeasonId { get; set; }

        /// <summary>
        /// Any Time Scopes describing the Document
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }
    }

    /// <summary>
    /// A record of completed work, contemporaneous in nature and scoped to a single Field or
    /// Crop Zone.     At least one Operation.   E.g.s.,
    /// -The harvest of a single Crop Zone completed by two combines over several days.   Each
    /// combine would record separate Operations.
    /// -The single-pass seeding/starter fertilizer/insecticide application of a corn Crop Zone
    /// by one row planter.   The Work Record would contain three Operation objects for each type
    /// of application.
    /// -A manual record of total harvested values, without knowledge of the harvesting
    /// equipment.   One Operation would record one or more Summary Values.
    /// </summary>
    public partial class WorkRecordElement
    {
        /// <summary>
        /// List of supplemental information for this data element
        /// </summary>
        [JsonProperty("contextItems", NullValueHandling = NullValueHandling.Ignore)]
        public List<ContextItemElement> ContextItems { get; set; }

        [JsonProperty("cropZoneId", NullValueHandling = NullValueHandling.Ignore)]
        public string CropZoneId { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Optional collection of correlations to other Documents within this data instance.
        /// </summary>
        [JsonProperty("documentCorrelations", NullValueHandling = NullValueHandling.Ignore)]
        public List<DocumentCorrelationElement> DocumentCorrelations { get; set; }

        [JsonProperty("fieldId")]
        public string FieldId { get; set; }

        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Any Notes on the Document
        /// </summary>
        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Notes { get; set; }

        /// <summary>
        /// The completed Operations that comprise this Word Record. Required.
        ///
        /// E.g.s., a tractor pulling a row planter with seeding, liquid fertilizer and granular
        /// insecticide application capabilities would have its data grouped into 4 constituent
        /// Operations: Application - SowingAndPlanting, Application - Fertilizing, Application -
        /// Crop Protection, and Vehicle Data Collection.
        ///
        /// Manually entered information can also be logged as Summary Values.
        /// </summary>
        [JsonProperty("operations")]
        public List<OperationElement> Operations { get; set; }

        [JsonProperty("seasonId", NullValueHandling = NullValueHandling.Ignore)]
        public string SeasonId { get; set; }

        /// <summary>
        /// Any Time Scopes describing the Document
        /// </summary>
        [JsonProperty("timeScopes", NullValueHandling = NullValueHandling.Ignore)]
        public List<TimeScopeElement> TimeScopes { get; set; }

        [JsonProperty("version", NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }
    }

    public partial class Root
    {
        public static Root FromJson(string json) => JsonConvert.DeserializeObject<Root>(json, AgGateway.ADAPT.Standard.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Root self) => JsonConvert.SerializeObject(self, AgGateway.ADAPT.Standard.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
